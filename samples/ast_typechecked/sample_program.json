{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDefinition",
      "name": "factorial",
      "params": [
        {
          "type": "FunctionParameter",
          "name": "n",
          "type_annotation": "int"
        }
      ],
      "body": [
        {
          "type": "IfStatement",
          "condition": {
            "inferred_type": "int",
            "type": "BinaryExpression",
            "operator": "<=",
            "left": {
              "inferred_type": "int",
              "type": "VariableExpression",
              "name": "n"
            },
            "right": {
              "inferred_type": "int",
              "type": "LiteralExpression",
              "value": 1,
              "literal_type": "int"
            }
          },
          "thenBody": [
            {
              "type": "ReturnStatement",
              "expression": {
                "inferred_type": "int",
                "type": "LiteralExpression",
                "value": 1,
                "literal_type": "int"
              },
              "inferred_type": "int"
            }
          ],
          "elseifClauses": [],
          "elseBody": [
            {
              "type": "ReturnStatement",
              "expression": {
                "inferred_type": "int",
                "type": "BinaryExpression",
                "operator": "*",
                "left": {
                  "inferred_type": "int",
                  "type": "VariableExpression",
                  "name": "n"
                },
                "right": {
                  "type": "ConversionExpression",
                  "from_type": "void",
                  "to_type": "int",
                  "source_expr": {
                    "inferred_type": "void",
                    "type": "FnExpression",
                    "name": {
                      "type": "VariableExpression",
                      "name": "factorial"
                    },
                    "arguments": [
                      {
                        "inferred_type": "int",
                        "type": "BinaryExpression",
                        "operator": "-",
                        "left": {
                          "inferred_type": "int",
                          "type": "VariableExpression",
                          "name": "n"
                        },
                        "right": {
                          "inferred_type": "int",
                          "type": "LiteralExpression",
                          "value": 1,
                          "literal_type": "int"
                        }
                      }
                    ]
                  }
                }
              },
              "inferred_type": "int"
            }
          ],
          "inferred_type": "int"
        }
      ],
      "return_type": "int"
    },
    {
      "type": "FunctionDefinition",
      "name": "main",
      "params": [],
      "body": [
        {
          "type": "LetStatement",
          "variable": {
            "inferred_type": "int",
            "type": "VariableExpression",
            "name": "x"
          },
          "expression": {
            "inferred_type": "int",
            "type": "LiteralExpression",
            "value": 5,
            "literal_type": "int"
          },
          "inferred_type": "int"
        },
        {
          "type": "PrintStatement",
          "expressions": [
            {
              "inferred_type": "string",
              "type": "LiteralExpression",
              "value": "Factorial of ",
              "literal_type": "string"
            },
            {
              "inferred_type": "int",
              "type": "VariableExpression",
              "name": "x"
            },
            {
              "inferred_type": "string",
              "type": "LiteralExpression",
              "value": " is ",
              "literal_type": "string"
            },
            {
              "inferred_type": "int",
              "type": "FnExpression",
              "name": {
                "type": "VariableExpression",
                "name": "factorial"
              },
              "arguments": [
                {
                  "inferred_type": "int",
                  "type": "VariableExpression",
                  "name": "x"
                }
              ]
            }
          ],
          "inferred_type": "void"
        }
      ],
      "return_type": "void"
    }
  ]
}