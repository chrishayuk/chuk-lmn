{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDefinition",
      "name": "closure_adder",
      "params": [
        {
          "type": "FunctionParameter",
          "name": "x",
          "type_annotation": "int"
        }
      ],
      "body": [
        {
          "type": "ReturnStatement",
          "expression": {
            "inferred_type": {
              "is_closure": true,
              "param_names": [
                "y"
              ],
              "param_types": [
                "int"
              ],
              "return_type": "int"
            },
            "type": "AnonymousFunction",
            "parameters": [
              [
                "y",
                "int"
              ]
            ],
            "return_type": "int",
            "body": [
              {
                "type": "ReturnStatement",
                "expression": {
                  "inferred_type": "int",
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "inferred_type": "int",
                    "type": "VariableExpression",
                    "name": "x"
                  },
                  "right": {
                    "inferred_type": "int",
                    "type": "VariableExpression",
                    "name": "y"
                  }
                },
                "inferred_type": "int"
              }
            ]
          },
          "inferred_type": {
            "is_closure": true,
            "param_names": [
              "y"
            ],
            "param_types": [
              "int"
            ],
            "return_type": "int"
          }
        }
      ],
      "return_type": "function"
    },
    {
      "type": "FunctionDefinition",
      "name": "main",
      "params": [],
      "body": [
        {
          "type": "LetStatement",
          "variable": {
            "inferred_type": "function",
            "type": "VariableExpression",
            "name": "add5"
          },
          "expression": {
            "inferred_type": "function",
            "type": "FnExpression",
            "name": {
              "type": "VariableExpression",
              "name": "closure_adder"
            },
            "arguments": [
              {
                "inferred_type": "int",
                "type": "LiteralExpression",
                "value": 5,
                "literal_type": "int"
              }
            ]
          },
          "inferred_type": "function"
        },
        {
          "type": "LetStatement",
          "variable": {
            "inferred_type": "void",
            "type": "VariableExpression",
            "name": "result1"
          },
          "expression": {
            "inferred_type": "void",
            "type": "FnExpression",
            "name": {
              "type": "VariableExpression",
              "name": "add5"
            },
            "arguments": [
              {
                "inferred_type": "int",
                "type": "LiteralExpression",
                "value": 10,
                "literal_type": "int"
              }
            ]
          },
          "inferred_type": "void"
        },
        {
          "type": "PrintStatement",
          "expressions": [
            {
              "inferred_type": "string",
              "type": "LiteralExpression",
              "value": "add5(10) => ",
              "literal_type": "string"
            },
            {
              "inferred_type": "void",
              "type": "VariableExpression",
              "name": "result1"
            }
          ],
          "inferred_type": "void"
        },
        {
          "type": "LetStatement",
          "variable": {
            "inferred_type": "function",
            "type": "VariableExpression",
            "name": "add100"
          },
          "expression": {
            "inferred_type": "function",
            "type": "FnExpression",
            "name": {
              "type": "VariableExpression",
              "name": "closure_adder"
            },
            "arguments": [
              {
                "inferred_type": "int",
                "type": "LiteralExpression",
                "value": 100,
                "literal_type": "int"
              }
            ]
          },
          "inferred_type": "function"
        },
        {
          "type": "LetStatement",
          "variable": {
            "inferred_type": "void",
            "type": "VariableExpression",
            "name": "result2"
          },
          "expression": {
            "inferred_type": "void",
            "type": "FnExpression",
            "name": {
              "type": "VariableExpression",
              "name": "add100"
            },
            "arguments": [
              {
                "inferred_type": "int",
                "type": "LiteralExpression",
                "value": 42,
                "literal_type": "int"
              }
            ]
          },
          "inferred_type": "void"
        },
        {
          "type": "PrintStatement",
          "expressions": [
            {
              "inferred_type": "string",
              "type": "LiteralExpression",
              "value": "add100(42) => ",
              "literal_type": "string"
            },
            {
              "inferred_type": "void",
              "type": "VariableExpression",
              "name": "result2"
            }
          ],
          "inferred_type": "void"
        },
        {
          "type": "ReturnStatement",
          "expression": {
            "inferred_type": "int",
            "type": "LiteralExpression",
            "value": 0,
            "literal_type": "int"
          },
          "inferred_type": "int"
        }
      ],
      "return_type": "int"
    }
  ]
}