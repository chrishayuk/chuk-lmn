# file: samples/lmn/type_inferred_arrays_test.lmn

# -----------------------------------------------------
# 1) Mixed typed and inferred scalars
# -----------------------------------------------------
let typedInt:int = 42
print typedInt

let inferredInt = 100
print inferredInt

let typedFloat:float = 3.14
print typedFloat

let inferredFloat = 2.71828
print inferredFloat

let typedDouble:double = 123.456
print typedDouble

let inferredDouble = 0.000123
print inferredDouble

let typedLong:long = 12345678901
print typedLong

let inferredLong = 98765432100
print inferredLong


# -----------------------------------------------------
# 2) Arrays of each scalar type, both typed and inferred
# -----------------------------------------------------

# 2a) int array
let typedIntArray:int[] = [ 1, 2, 3, 4 ]
print "Typed int array:" typedIntArray

let inferredIntArray = [ 10, 20, 30 ]
print "Inferred int array:" inferredIntArray

# 2b) float array
let typedFloatArray:float[] = [ 1.5, 2.25, 3.75 ]
print "Typed float array:" typedFloatArray

let inferredFloatArray = [ 0.5, 0.75, 0.95 ]
print "Inferred float array:" inferredFloatArray

# 2c) double array
let typedDoubleArray:double[] = [ 10.1, 20.2, 30.3 ]
print "Typed double array:" typedDoubleArray

let inferredDoubleArray = [ 9.9999, 88.8888, 777.7777 ]
print "Inferred double array:" inferredDoubleArray

# 2d) long array
let typedLongArray:long[] = [ 10000000000, 20000000000, 30000000000 ]
print "Typed long array:" typedLongArray

let inferredLongArray = [ 11111111111, 22222222222, 33333333333 ]
print "Inferred long array:" inferredLongArray

# # 2e) 2D array of int
# let typedMatrix:int[][] = [
#     [ 1, 2 ],
#     [ 3, 4 ]
# ]
# print "Typed 2D int array:" typedMatrix

# let inferredMatrix = [
#     [ 10, 20 ],
#     [ 30, 40 ],
#     [ 50, 60 ]
# ]
# print "Inferred 2D int array:" inferredMatrix


# -----------------------------------------------------
# 3) Strings
# -----------------------------------------------------

# 3a) single string
let typedString:string = "Hello from typed string!"
print typedString

let inferredString = "Hello from inferred string!"
print inferredString

# 3b) array of strings
let typedStringArray:string[] = [ "Alice", "Bob", "Carol" ]
print "Typed string array:" typedStringArray

let inferredStringArray = [ "X", "Y", "Z" ]
print "Inferred string array:" inferredStringArray


# -----------------------------------------------------
# 4) JSON
# -----------------------------------------------------

# 4a) single JSON object
let typedJson:json = { "foo": "bar", "count": 42 }
print "Typed single JSON:" typedJson

let inferredJson = { "hello": "world", "value": 999 }
print "Inferred single JSON:" inferredJson

# 4b) array of JSON objects
let typedJsonArray:json[] = [
    { "id": 1, "active": true },
    { "id": 2, "active": false }
]
print "Typed JSON array:" typedJsonArray

let inferredJsonArray = [
    { "planet": "Earth", "population": 8000000000 },
    { "planet": "Mars",  "population": 0 }
]
print "Inferred JSON array:" inferredJsonArray

# 4c) Nested JSON with arrays inside
let typedNestedJson:json = {
    "departments": [
        {
            "name": "Engineering",
            "members": [ "Alice", "Bob" ]
        },
        {
            "name": "Design",
            "members": [ "Carol", "Dave" ]
        }
    ],
    "location": "HQ"
}
print "Typed nested JSON:" typedNestedJson

let inferredNestedJson = {
    "metadata": {
        "version": 1,
        "tags": ["inferred", "test"]
    },
    "data": {
        "items": [ 10, 20, 30 ]
    }
}
print "Inferred nested JSON:" inferredNestedJson
