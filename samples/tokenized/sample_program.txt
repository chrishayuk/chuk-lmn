Token(LmnTokenType.COMMENT,  file: samples/lmn/type_inferred_arrays_test.lmn)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  1) Mixed typed and inferred scalars)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedInt)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedInt)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredInt)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 100)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredInt)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedFloat)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FLOAT, float)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedFloat)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredFloat)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 2.71828)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredFloat)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedDouble)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.DOUBLE, double)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 123.456)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedDouble)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredDouble)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 0.000123)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredDouble)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedLong)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG, long)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 12345678901)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedLong)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredLong)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 98765432100)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredLong)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  2) Arrays of each scalar type, both typed and inferred)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  2a) int array)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedIntArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 4)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed int array:)
Token(LmnTokenType.IDENTIFIER, typedIntArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredIntArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred int array:)
Token(LmnTokenType.IDENTIFIER, inferredIntArray)
Token(LmnTokenType.COMMENT,  2b) float array)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedFloatArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FLOAT, float)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 1.5)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 2.25)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 3.75)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed float array:)
Token(LmnTokenType.IDENTIFIER, typedFloatArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredFloatArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 0.5)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 0.75)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 0.95)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred float array:)
Token(LmnTokenType.IDENTIFIER, inferredFloatArray)
Token(LmnTokenType.COMMENT,  2c) double array)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedDoubleArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.DOUBLE, double)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 10.1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 20.2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 30.3)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed double array:)
Token(LmnTokenType.IDENTIFIER, typedDoubleArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredDoubleArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 9.9999)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 88.8888)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 777.7777)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred double array:)
Token(LmnTokenType.IDENTIFIER, inferredDoubleArray)
Token(LmnTokenType.COMMENT,  2d) long array)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedLongArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG, long)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LONG_LITERAL, 10000000000)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 20000000000)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 30000000000)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed long array:)
Token(LmnTokenType.IDENTIFIER, typedLongArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredLongArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LONG_LITERAL, 11111111111)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 22222222222)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 33333333333)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred long array:)
Token(LmnTokenType.IDENTIFIER, inferredLongArray)
Token(LmnTokenType.COMMENT,  2e) 2D array of int)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedMatrix)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 4)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed 2D int array:)
Token(LmnTokenType.IDENTIFIER, typedMatrix)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredMatrix)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 40)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 50)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 60)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred 2D int array:)
Token(LmnTokenType.IDENTIFIER, inferredMatrix)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  3) Strings)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  3a) single string)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedString)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING_TYPE, string)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.STRING, Hello from typed string!)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedString)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredString)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.STRING, Hello from inferred string!)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredString)
Token(LmnTokenType.COMMENT,  3b) array of strings)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedStringArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING_TYPE, string)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Bob)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Carol)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed string array:)
Token(LmnTokenType.IDENTIFIER, typedStringArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredStringArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, X)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Y)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Z)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred string array:)
Token(LmnTokenType.IDENTIFIER, inferredStringArray)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  4) JSON)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  4a) single JSON object)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedJson)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.JSON_TYPE, json)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, foo)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, bar)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, count)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed single JSON:)
Token(LmnTokenType.IDENTIFIER, typedJson)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredJson)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, hello)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, world)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, value)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 999)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred single JSON:)
Token(LmnTokenType.IDENTIFIER, inferredJson)
Token(LmnTokenType.COMMENT,  4b) array of JSON objects)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedJsonArray)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.JSON_TYPE, json)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, id)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, active)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.TRUE, true)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, id)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, active)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FALSE, false)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed JSON array:)
Token(LmnTokenType.IDENTIFIER, typedJsonArray)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredJsonArray)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, planet)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Earth)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, population)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG_LITERAL, 8000000000)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, planet)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Mars)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, population)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred JSON array:)
Token(LmnTokenType.IDENTIFIER, inferredJsonArray)
Token(LmnTokenType.COMMENT,  4c) Nested JSON with arrays inside)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedNestedJson)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.JSON_TYPE, json)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, departments)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Engineering)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, members)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Bob)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Design)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, members)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, Carol)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, Dave)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, location)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, HQ)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Typed nested JSON:)
Token(LmnTokenType.IDENTIFIER, typedNestedJson)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredNestedJson)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, metadata)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, version)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, tags)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, inferred)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, test)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, data)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, items)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inferred nested JSON:)
Token(LmnTokenType.IDENTIFIER, inferredNestedJson)
