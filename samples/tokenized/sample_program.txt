Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, sum)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.BEGIN, begin)
Token(LmnTokenType.COMMENT,  temp variable within block)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, temp)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  print the temp value)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Inside nested block of sum, temp = )
Token(LmnTokenType.IDENTIFIER, temp)
Token(LmnTokenType.COMMENT,  'temp' is discarded after this block)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  create a new variable for the result)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, result)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  Another nested block, just to show deeper scoping)
Token(LmnTokenType.BEGIN, begin)
Token(LmnTokenType.COMMENT,  get half of the result)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, half)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, result)
Token(LmnTokenType.DIV, /)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMENT,  print out the half)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Still inside sum, half = )
Token(LmnTokenType.IDENTIFIER, half)
Token(LmnTokenType.COMMENT,  'half' is discarded after this block)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  return the result)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, result)
Token(LmnTokenType.END, end)
Token(LmnTokenType.BEGIN, begin)
Token(LmnTokenType.COMMENT,  calculate the sum)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, sum)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 4)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  print it)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, In outer block, x = )
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COMMENT,  Another nested block to show x is still accessible, but new variables vanish after end)
Token(LmnTokenType.BEGIN, begin)
Token(LmnTokenType.COMMENT,  get z from the result of sum)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, z)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.MUL, *)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMENT,  print the result)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Nested block: z = )
Token(LmnTokenType.IDENTIFIER, z)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  z is not accessible here!)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Back in outer block, x still = )
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  global var)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, globalVar)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, sum)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  print)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, globalVar after sum(10, 20): )
Token(LmnTokenType.IDENTIFIER, globalVar)
