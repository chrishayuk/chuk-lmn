Token(LmnTokenType.COMMENT,  Computes n! recursively)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  If n <= 1, return 1)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.LE, <=)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.COMMENT,  Otherwise, n * factorial(n - 1))
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MUL, *)
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, main)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Factorial of)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.STRING, is)
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
