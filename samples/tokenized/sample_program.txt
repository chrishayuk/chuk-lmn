Token(LmnTokenType.COMMENT,  extended_operators.lmn)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, demonstrateExtendedOperators)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  1. Show float division using '/')
Token(LmnTokenType.COMMENT,  (Assume both a and b are interpreted as floats or implicitly cast))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.DIV, /)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  2. Show integer division using '//')
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.FLOORDIV, //)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  3. Show modulo operator '%')
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.MOD, %)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  5. Postfix increment (a++), postfix decrement (b--))
Token(LmnTokenType.COMMENT,  - We'll print the value after the operation)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.INC, ++)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.DEC, --)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  6. Compound assignment operators += and -=)
Token(LmnTokenType.COMMENT,  - a += 3 means a = a + 3)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.PLUS_EQ, +=)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.MINUS_EQ, -=)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  7. Alternative compound assignment =+ and =-)
Token(LmnTokenType.COMMENT,  - a =+ x means a = a + x)
Token(LmnTokenType.COMMENT,  - b =- y means b = b - y)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.EQ_PLUS, =+)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.EQ_MINUS, =-)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.COMMENT,  Return something to see final result)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Test calls, each prints a series of outputs)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, demonstrateExtendedOperators)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, demonstrateExtendedOperators)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, demonstrateExtendedOperators)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 12)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, demonstrateExtendedOperators)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 6)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 6)
Token(LmnTokenType.RPAREN, ))
