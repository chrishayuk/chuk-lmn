Token(LmnTokenType.COMMENT,  file: samples/lmn/test_features.lmn)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  1) A simple string literal)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  -- Inferred version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, greeting)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.STRING, Hello\nWorld!)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, greeting)
Token(LmnTokenType.COMMENT,  -- Typed version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedGreeting)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING_TYPE, string)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.STRING, Hello typed world)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedGreeting)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  2) A JSON object literal)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  -- Inferred version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, age)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, User data:)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.COMMENT,  -- Typed version (assumes 'json' keyword is recognized):)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedUser)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.JSON_TYPE, json)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, age)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, User data (typed):)
Token(LmnTokenType.IDENTIFIER, typedUser)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  3) A bracket-literal array of strings (string[]))
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  -- Inferred version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, colors)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, red)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, green)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, blue)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Colors array (inferred):)
Token(LmnTokenType.IDENTIFIER, colors)
Token(LmnTokenType.COMMENT,  -- Typed version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedColors)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING_TYPE, string)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, red)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, green)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, blue)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Colors array (typed):)
Token(LmnTokenType.IDENTIFIER, typedColors)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  4) Some numeric prints)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  -- Inferred int:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 123)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COMMENT,  -- Typed int:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedX)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 123)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedX)
Token(LmnTokenType.COMMENT,  Large integer => might unify to i64 (inferred):)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, bigNum)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 4294967298)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, bigNum)
Token(LmnTokenType.COMMENT,  Typed long:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedBigNum)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG, long)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 4294967298)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedBigNum)
Token(LmnTokenType.COMMENT,  Decimal => by default might become f64 (inferred):)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, decVal)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, decVal)
Token(LmnTokenType.COMMENT,  Typed float (f32):)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedDecVal)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FLOAT, float)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, typedDecVal)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  5) Another JSON object, just to show printing)
Token(LmnTokenType.COMMENT,  -----------------------------------------------------)
Token(LmnTokenType.COMMENT,  -- Inferred version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, jsonData)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, foo)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, bar)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, nums)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, active)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.TRUE, true)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, jsonData (inferred):)
Token(LmnTokenType.IDENTIFIER, jsonData)
Token(LmnTokenType.COMMENT,  -- Typed version:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, typedJsonData)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.JSON_TYPE, json)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, foo)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, bar)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, nums)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, active)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.TRUE, true)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, jsonData (typed):)
Token(LmnTokenType.IDENTIFIER, typedJsonData)
