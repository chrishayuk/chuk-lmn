Token(LmnTokenType.COMMENT,  file: samples/lmn/test_features.lmn)
Token(LmnTokenType.COMMENT,  1) A simple string literal)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, greeting)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.STRING, Hello\nWorld!)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, greeting)
Token(LmnTokenType.COMMENT,  2) A JSON object literal)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, age)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, User data:)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.COMMENT,  3) A bracket-literal array of strings => typed as string[])
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, colors)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.STRING, red)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, green)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, blue)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Colors array:)
Token(LmnTokenType.IDENTIFIER, colors)
Token(LmnTokenType.COMMENT,  4) Some numeric prints)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 123)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COMMENT,  Large integer => might unify to i64)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, bigNum)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 4294967298)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, bigNum)
Token(LmnTokenType.COMMENT,  Decimal => f32/f64)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, decVal)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, decVal)
Token(LmnTokenType.COMMENT,  5) Another JSON object, just to show printing)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, jsonData)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, foo)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, bar)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, nums)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 20)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 30)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, active)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.TRUE, true)
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, jsonData:)
Token(LmnTokenType.IDENTIFIER, jsonData)
