Token(LmnTokenType.COMMENT,  file: closure_adder.lmn)
Token(LmnTokenType.COMMENT,  1) closure_adder(x: int) -> function)
Token(LmnTokenType.COMMENT,     Returns an anonymous function that, when called with y,)
Token(LmnTokenType.COMMENT,     returns x + y. This is a classic "adder" closure.)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, closure_adder)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.COMMENT,  Return an inline/anonymous function)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.COMMENT,  The function body can reference 'x' from the outer scope)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  2) Our main function)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, main)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.COMMENT,  We'll create an "add5" function by calling closure_adder(5))
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, add5)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, closure_adder)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  Now add5 is effectively function(y) => 5 + y)
Token(LmnTokenType.COMMENT,  Let's see add5 in action:)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, result1)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, add5)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  5 + 10 => 15)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, add5(10) => )
Token(LmnTokenType.IDENTIFIER, result1)
Token(LmnTokenType.COMMENT,  We can create multiple closures)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, add100)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, closure_adder)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 100)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, result2)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, add100)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  100 + 42 => 142)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, add100(42) => )
Token(LmnTokenType.IDENTIFIER, result2)
Token(LmnTokenType.COMMENT,  Return 0 from main)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.END, end)
