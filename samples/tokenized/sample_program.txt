Token(LmnTokenType.COMMENT,  # file: samples/lmn/test_features.lmn)
Token(LmnTokenType.COMMENT,  # 1) A simple string literal)
Token(LmnTokenType.COMMENT,  let greeting = "Hello\nWorld!")
Token(LmnTokenType.COMMENT,  print greeting)
Token(LmnTokenType.COMMENT,  # 2) A JSON object literal)
Token(LmnTokenType.COMMENT,  let user = {)
Token(LmnTokenType.COMMENT,      "name": "Alice",)
Token(LmnTokenType.COMMENT,      "age": 42)
Token(LmnTokenType.COMMENT,  })
Token(LmnTokenType.COMMENT,  print "User data:" user)
Token(LmnTokenType.COMMENT,  # 3) A bracket-literal array of strings => typed as string[])
Token(LmnTokenType.COMMENT,  let colors = [ "red", "green", "blue" ])
Token(LmnTokenType.COMMENT,  print "Colors array:" colors)
Token(LmnTokenType.COMMENT,  # 4) Some numeric prints)
Token(LmnTokenType.COMMENT,  let x = 123)
Token(LmnTokenType.COMMENT,  print x)
Token(LmnTokenType.COMMENT,  # Large integer => might unify to i64)
Token(LmnTokenType.COMMENT,  let bigNum = 4294967298)
Token(LmnTokenType.COMMENT,  print bigNum)
Token(LmnTokenType.COMMENT,  # Decimal => f32/f64)
Token(LmnTokenType.COMMENT,  let decVal = 3.14)
Token(LmnTokenType.COMMENT,  print decVal)
Token(LmnTokenType.COMMENT,  # 5) Another JSON object, just to show printing)
Token(LmnTokenType.COMMENT,  let jsonData = {)
Token(LmnTokenType.COMMENT,      "foo": "bar",)
Token(LmnTokenType.COMMENT,      "nums": [10, 20, 30],)
Token(LmnTokenType.COMMENT,      "active": true)
Token(LmnTokenType.COMMENT,  })
Token(LmnTokenType.COMMENT,  print "jsonData:" jsonData)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.FLOAT_LITERAL, 2.71)
