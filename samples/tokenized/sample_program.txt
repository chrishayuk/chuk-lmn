Token(LmnTokenType.COMMENT,  Demonstrates "break" and "continue" in both a range-based and an array-based for loop)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, demonstrateBreakContinue)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, arr)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, === Range-based for loop (1..n) demonstration ===)
Token(LmnTokenType.FOR, for)
Token(LmnTokenType.IDENTIFIER, i)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.TO, to)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.COMMENT,  If i == 3, break out of the loop)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, i)
Token(LmnTokenType.EQEQ, ==)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Breaking at i = 3)
Token(LmnTokenType.BREAK, break)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Skip even numbers)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, i)
Token(LmnTokenType.MOD, %)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.EQEQ, ==)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Skipping even i = )
Token(LmnTokenType.IDENTIFIER, i)
Token(LmnTokenType.CONTINUE, continue)
Token(LmnTokenType.END, end)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Current i = )
Token(LmnTokenType.IDENTIFIER, i)
Token(LmnTokenType.END, end)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, === 'for-in' loop over array demonstration ===)
Token(LmnTokenType.FOR, for)
Token(LmnTokenType.IDENTIFIER, item)
Token(LmnTokenType.IN, in)
Token(LmnTokenType.IDENTIFIER, arr)
Token(LmnTokenType.COMMENT,  If the item is negative, break)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, item)
Token(LmnTokenType.LT, <)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Breaking at negative item: )
Token(LmnTokenType.IDENTIFIER, item)
Token(LmnTokenType.BREAK, break)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Skip zeros)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, item)
Token(LmnTokenType.EQEQ, ==)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Skipping zero item)
Token(LmnTokenType.CONTINUE, continue)
Token(LmnTokenType.END, end)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Current item = )
Token(LmnTokenType.IDENTIFIER, item)
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, main)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, nums)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 4)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.IDENTIFIER, demonstrateBreakContinue)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, nums)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
