Token(LmnTokenType.COMMENT,  file: samples/lmn/test_typed_arrays.lmn)
Token(LmnTokenType.COMMENT,  1) Some typed array of int => int[])
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, smallInts)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, int[] =>)
Token(LmnTokenType.IDENTIFIER, smallInts)
Token(LmnTokenType.COMMENT,  2) Big integers => long[])
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, bigVals)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG, long)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.LONG_LITERAL, 2147483648)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 4294967298)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.LONG_LITERAL, 999999999999)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, long[] =>)
Token(LmnTokenType.IDENTIFIER, bigVals)
Token(LmnTokenType.COMMENT,  3) Floats => float[])
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, floatVals)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FLOAT, float)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 1.0)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 2.5)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, float[] =>)
Token(LmnTokenType.IDENTIFIER, floatVals)
Token(LmnTokenType.COMMENT,  4) Doubles => double[])
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, doubleVals)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.DOUBLE, double)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.DOUBLE_LITERAL, 100.0)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 2.71828)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.DOUBLE_LITERAL, 123.456789)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, double[] =>)
Token(LmnTokenType.IDENTIFIER, doubleVals)
Token(LmnTokenType.COMMENT,  5) Some simple usage)
Token(LmnTokenType.COMMENT,  We'll show that you can also have typed arrays with negative and large mixed values)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, moreInts)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 9999)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 100000)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, more ints =>)
Token(LmnTokenType.IDENTIFIER, moreInts)
Token(LmnTokenType.COMMENT,  6) Possibly a JSON object to confirm you can still handle that)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LBRACE, {)
Token(LmnTokenType.STRING, name)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING, Alice)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.STRING, ids)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LBRACKET, [)
Token(LmnTokenType.INT_LITERAL, 101)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 202)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.INT_LITERAL, 303)
Token(LmnTokenType.RBRACKET, ])
Token(LmnTokenType.RBRACE, })
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, User data =>)
Token(LmnTokenType.IDENTIFIER, user)
Token(LmnTokenType.COMMENT,  7) Show printing typed arrays next to a string literal)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, End of typed arrays test!)
