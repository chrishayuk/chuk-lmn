Token(LmnTokenType.COMMENT,  Demonstration of optional parentheses in conditions (no strings))
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, checkNumericConditions)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  Simple if-elseif-else without parentheses)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.GT, >)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMENT,  print 999 if x > 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 999)
Token(LmnTokenType.ELSEIF, elseif)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQEQ, ==)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMENT,  print 1000 if x == 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 1000)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.COMMENT,  print 888 otherwise)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 888)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Another if statement, this time with parentheses)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.LT, <)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMENT,  print x+5 for demonstration if it's less than 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.BEGIN, begin)
Token(LmnTokenType.COMMENT,  Nested if with parentheses around a more complex expression)
Token(LmnTokenType.COMMENT,  for demonstration of operator precedence)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.MUL, *)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.LT, <)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.MUL, *)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  print 111 if that expression is true)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 111)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.COMMENT,  else print 222)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 222)
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Return x + 42 (just to have a return value))
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  Let's test a few values to see the results)
Token(LmnTokenType.COMMENT,  We'll print the input x and then call checkNumericConditions(x))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 8)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, checkNumericConditions)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 8)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, checkNumericConditions)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.INT_LITERAL, 12)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, checkNumericConditions)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.INT_LITERAL, 12)
Token(LmnTokenType.RPAREN, ))
