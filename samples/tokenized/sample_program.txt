Token(LmnTokenType.COMMENT,  test_functions_with_named.lmn)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.COMMENT,  1) Implicitly typed function)
Token(LmnTokenType.COMMENT,     Demonstrates the use of positional and named arguments.)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, add)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  Return the sum of 'a' and 'b')
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.COMMENT,  2) Type-annotated function)
Token(LmnTokenType.COMMENT,     factorial(n: int) -> int)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.COMMENT,  If n <= 1, return 1)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.LE, <=)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.COMMENT,  Otherwise, factorial(n) = n * factorial(n - 1))
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MUL, *)
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.COMMENT,  3) Type-annotated function returning a string)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, even_or_odd)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.STRING_TYPE, string)
Token(LmnTokenType.COMMENT,  Use modulo to check if x is even or odd)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.MOD, %)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.EQEQ, ==)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.STRING, even)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.STRING, odd)
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.COMMENT,  4) Main function (with type annotation))
Token(LmnTokenType.COMMENT,     main() -> int)
Token(LmnTokenType.COMMENT,  -------------------------)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, main)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.COMMENT,  4.1) Demonstrate positional vs. named arguments with 'add')
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 3)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.COMMENT,  4.1.1) Positional arguments (3 and 5 in order))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, add()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.STRING, ,)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.STRING, ) [positional] = )
Token(LmnTokenType.IDENTIFIER, add)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  4.1.2) Named arguments (explicitly matching parameter names))
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, add(a=)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.STRING, , b=)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.STRING, ) [named] = )
Token(LmnTokenType.IDENTIFIER, add)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, a)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.COMMA, ,)
Token(LmnTokenType.IDENTIFIER, b)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, y)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  4.2) Test the type-annotated 'factorial' function)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 5)
Token(LmnTokenType.COMMENT,  4.2.1) Factorial with positional argument)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, factorial()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.STRING, ) [positional] = )
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  4.2.2) Factorial with named argument)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, factorial(n=)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.STRING, ) [named] = )
Token(LmnTokenType.IDENTIFIER, factorial)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  4.3) Show if a number is even or odd using 'even_or_odd')
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, z)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, z)
Token(LmnTokenType.STRING,  is )
Token(LmnTokenType.IDENTIFIER, even_or_odd)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, z)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  4.4) Another quick check on an odd input)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, w)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 7)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, w)
Token(LmnTokenType.STRING,  is )
Token(LmnTokenType.IDENTIFIER, even_or_odd)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, w)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  Return 0 from main)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.INT_LITERAL, 0)
Token(LmnTokenType.END, end)
