Token(LmnTokenType.COMMENT,  04_2_assignment_numbers_declare_assign.lmn)
Token(LmnTokenType.COMMENT,  Demonstrates typed variable declarations vs. separate assignment,)
Token(LmnTokenType.COMMENT,  and also shows inferred variables.)
Token(LmnTokenType.COMMENT,  1. Declare typed variables without initializing)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, smallVal)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, bigVal)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.LONG, long)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, ratio)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.FLOAT, float)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, eVal)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.DOUBLE, double)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, negative)
Token(LmnTokenType.COLON, :)
Token(LmnTokenType.INT, int)
Token(LmnTokenType.COMMENT,  2. Also declare variables with *no* type annotation (inferred))
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredInt)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredLarge)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredRatio)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, inferredNegative)
Token(LmnTokenType.COMMENT,  3. Assign values afterward)
Token(LmnTokenType.IDENTIFIER, smallVal)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.IDENTIFIER, bigVal)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 2147483648)
Token(LmnTokenType.IDENTIFIER, ratio)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 3.14)
Token(LmnTokenType.COMMENT,  float => requires 'f' suffix if you want a float literal)
Token(LmnTokenType.IDENTIFIER, eVal)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 2.71828)
Token(LmnTokenType.COMMENT,  double => no 'f' suffix)
Token(LmnTokenType.IDENTIFIER, negative)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.COMMENT,  4. Assign values to the inferred variables)
Token(LmnTokenType.IDENTIFIER, inferredInt)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 42)
Token(LmnTokenType.IDENTIFIER, inferredLarge)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.LONG_LITERAL, 9999999999999)
Token(LmnTokenType.IDENTIFIER, inferredRatio)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.DOUBLE_LITERAL, 0.5)
Token(LmnTokenType.COMMENT,  could be inferred as double)
Token(LmnTokenType.IDENTIFIER, inferredNegative)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 100)
Token(LmnTokenType.COMMENT,  5. Print the results)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, smallVal)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, bigVal)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, ratio)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, eVal)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, negative)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredInt)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredLarge)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredRatio)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.IDENTIFIER, inferredNegative)
