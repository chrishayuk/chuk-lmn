Token(LmnTokenType.COMMENT,  A simple Fibonacci function)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, fib)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  0, 1)
Token(LmnTokenType.IF, if)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.LT, <)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.COMMENT,  return n)
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.ELSE, else)
Token(LmnTokenType.COMMENT,  Otherwise, return fib(n - 1) + fib(n - 2))
Token(LmnTokenType.RETURN, return)
Token(LmnTokenType.IDENTIFIER, fib)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 1)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.PLUS, +)
Token(LmnTokenType.IDENTIFIER, fib)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, n)
Token(LmnTokenType.MINUS, -)
Token(LmnTokenType.INT_LITERAL, 2)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
Token(LmnTokenType.END, end)
Token(LmnTokenType.COMMENT,  The main entry point)
Token(LmnTokenType.FUNCTION, function)
Token(LmnTokenType.IDENTIFIER, main)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.COMMENT,  assign x to be 10)
Token(LmnTokenType.LET, let)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.EQ, =)
Token(LmnTokenType.INT_LITERAL, 10)
Token(LmnTokenType.COMMENT,  Print a message and the fib(x) value)
Token(LmnTokenType.PRINT, print)
Token(LmnTokenType.STRING, Fibonacci of)
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.STRING, is)
Token(LmnTokenType.IDENTIFIER, fib)
Token(LmnTokenType.LPAREN, ()
Token(LmnTokenType.IDENTIFIER, x)
Token(LmnTokenType.RPAREN, ))
Token(LmnTokenType.END, end)
