PROGRAM
  := (FUNCTION_DEFINITION | STATEMENT | COMMENT)*

FUNCTION_DEFINITION
  := FUNCTION IDENTIFIER LPAREN PARAM_LIST? RPAREN NEWLINE
     (STATEMENT | COMMENT)*
     END

PARAM_LIST
  := IDENTIFIER (COMMA IDENTIFIER)*

STATEMENT
  := SET_STATEMENT
   | PRINT_STATEMENT
   | IF_STATEMENT
   | FOR_STATEMENT
   | RETURN_STATEMENT
   | CALL_STATEMENT
   | BREAK_STATEMENT
   | EXPRESSION        # (optional if you allow bare expressions)
   | NEWLINE
   | COMMENT           # (if you're not discarding them)

SET_STATEMENT
  := SET IDENTIFIER EXPRESSION

PRINT_STATEMENT
  := PRINT (EXPRESSION)+

IF_STATEMENT
  := IF LPAREN EXPRESSION RPAREN NEWLINE
       (STATEMENT | COMMENT)*
     ( ELSE NEWLINE
       (STATEMENT | COMMENT)*
     )?
     END

FOR_STATEMENT
  := FOR IDENTIFIER FOR_CLAUSE NEWLINE
       (STATEMENT | COMMENT)*
     END

# Updated here to allow expressions on both sides of 'to'
FOR_CLAUSE
  := ( EXPRESSION TO EXPRESSION )  # e.g. "for i 1 to n"
   | ( IN EXPRESSION )             # e.g. "for city in myList"

RETURN_STATEMENT
  := RETURN EXPRESSION

CALL_STATEMENT
  := CALL STRING (EXPRESSION)*

BREAK_STATEMENT
  := BREAK

EXPRESSION
  := LOGICAL_OR_EXPR

LOGICAL_OR_EXPR
  := LOGICAL_AND_EXPR
     ( OR LOGICAL_AND_EXPR )*

LOGICAL_AND_EXPR
  := EQUALITY_EXPR
     ( AND EQUALITY_EXPR )*

EQUALITY_EXPR
  := RELATIONAL_EXPR
     ( ( EQ | NE ) RELATIONAL_EXPR )*

RELATIONAL_EXPR
  := ADD_EXPR
     ( ( LT | LE | GT | GE ) ADD_EXPR )*

ADD_EXPR
  := MULT_EXPR
     ( ( PLUS | MINUS ) MULT_EXPR )*

MULT_EXPR
  := POW_EXPR
     ( ( MUL | DIV ) POW_EXPR )*

POW_EXPR
  := UNARY_EXPR
     ( POW UNARY_EXPR )*

UNARY_EXPR
  := ( PLUS | MINUS | NOT )* PRIMARY

PRIMARY
  := NUMBER
   | STRING
   | TRUE
   | FALSE
   | NIL
   | IDENTIFIER FUNCTION_CALL_ARGS?  # variable or function call
   | LPAREN EXPRESSION RPAREN
   | ARRAY_LITERAL

FUNCTION_CALL_ARGS
  := LPAREN ( ARG_LIST )? RPAREN

ARG_LIST
  := EXPRESSION ( COMMA EXPRESSION )*

ARRAY_LITERAL
  := LBRACKET ( EXPRESSION ( COMMA EXPRESSION )* )? RBRACKET
